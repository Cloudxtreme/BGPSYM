package nl.nlnetlabs.bgpsym01.primitives.converters;

import java.util.ArrayList;
import java.util.List;

import nl.nlnetlabs.bgpsym01.primitives.bgp.Prefix;
import nl.nlnetlabs.bgpsym01.primitives.types.Pair;

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;

/**
 * Converts list of pairs (prefix + string value) into an xml like:
 * 
 * <pre>
 * &lt;prefixes&gt;
 *     &lt;pair&gt;
 *       &lt;prefix&gt;7&lt;/prefix&gt;
 *       &lt;name&gt;prefix_3__&lt;/name&gt;
 *     &lt;/pair&gt;
 *     &lt;pair&gt;
 *       &lt;prefix&gt;8&lt;/prefix&gt;
 *       &lt;name&gt;prefix_4__&lt;/name&gt;
 *     &lt;/pair&gt;
 *     &lt;pair&gt;
 *       &lt;prefix&gt;9&lt;/prefix&gt;
 *       &lt;name&gt;prefix_5__&lt;/name&gt;
 *     &lt;/pair&gt;
 *   &lt;/prefixes&gt;
 * </pre>
 * 
 * NOTE: &lt;prefixes&gt; is the name of the attribute and is not generated by
 * this class.
 */
public class PrefixPairListConverter implements Converter {

    @SuppressWarnings("unchecked")
    public void marshal(Object list, HierarchicalStreamWriter writer, MarshallingContext arg2) {
        // List<Prefix> prefixList = (List<Prefix>) list;
        List<Pair<Prefix, String>> prefixList = (List<Pair<Prefix, String>>) list;
        for (Pair<Prefix, String> pair : prefixList) {
            writer.startNode("pair");
            writer.startNode("prefix");
            writer.setValue(pair.key.getNum() + "");
            writer.endNode(); // </prefix>
            writer.startNode("name");
            writer.setValue(pair.value);
            writer.endNode(); // </name>
            writer.endNode(); // </pair>
        }
    }

    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext arg1) {
        List<Pair<Prefix, String>> prefixList = new ArrayList<Pair<Prefix, String>>();
        while (reader.hasMoreChildren()) {
            reader.moveDown(); // in <pair>
            reader.moveDown(); // in <prefix>
            Prefix prefix = Prefix.getInstance(Integer.parseInt(reader.getValue()));
            reader.moveUp(); // back in <pair>
            reader.moveDown(); // in <name>
            String name = reader.getValue();
            reader.moveUp(); // in <pair>
            reader.moveUp(); // in top element
            prefixList.add(new Pair<Prefix, String>(prefix, name));
        }
        return prefixList;

    }

    @SuppressWarnings("unchecked")
    public boolean canConvert(Class clazz) {
        return List.class.isAssignableFrom(clazz);
    }

}
